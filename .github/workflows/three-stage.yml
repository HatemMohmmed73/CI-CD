name: 3-Stage CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  # Stage 1: Build
  build:
    name: Build Stage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Build application
      run: |
        mkdir -p dist
        cp -r public dist/
        cp server.js dist/
        cp package.json dist/
        cp package-lock.json dist/
        cd dist && npm ci --only=production
    
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts
        path: dist/
        retention-days: 7

  # Stage 2: Test
  test:
    name: Test Stage
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run linting (optional)
      run: npm run lint || echo "Linting failed but continuing..."
      continue-on-error: true
    
    - name: Run unit tests
      run: npm test -- --verbose --detectOpenHandles
    
    - name: Test server health (with retry)
      run: |
        # Start server in background
        npm start &
        SERVER_PID=$!
        
        # Wait for server to start
        echo "Waiting for server to start..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "Server is ready!"
            break
          fi
          echo "Attempt $i: Server not ready yet..."
          sleep 2
        done
        
        # Test health endpoint
        curl -f http://localhost:3000/health
        
        # Cleanup
        kill $SERVER_PID || true
        wait $SERVER_PID 2>/dev/null || true
    
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts
        path: dist/
    
    - name: Test built application
      run: |
        cd dist
        
        # Start built application
        npm start &
        SERVER_PID=$!
        
        # Wait for server to start
        echo "Waiting for built server to start..."
        for i in {1..30}; do
          if curl -f http://localhost:3000/health > /dev/null 2>&1; then
            echo "Built server is ready!"
            break
          fi
          echo "Attempt $i: Built server not ready yet..."
          sleep 2
        done
        
        # Test health endpoint
        curl -f http://localhost:3000/health
        
        # Cleanup
        kill $SERVER_PID || true
        wait $SERVER_PID 2>/dev/null || true

  # Stage 3: Deploy to AWS
  deploy:
    name: Deploy to Render
    runs-on: ubuntu-latest
    needs: test
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Trigger Render Deploy Hook
        run: |
          curl -X POST "$RENDER_DEPLOY_HOOK"
        env:
          RENDER_DEPLOY_HOOK: ${{ secrets.RENDER_DEPLOY_HOOK}}
      - name: Notify deployment success
        run: |
          echo "ðŸš€ Successfully triggered Render deployment!"
          echo "Application is live at: https://ci-cd-oufn.onrender.com/" 